---
import DefaultLayout from '../layouts/default.astro';
import Today from '../components/Today.vue';
import StaticEventList from '../components/StaticEventList.astro';
import EventList from '../components/EventList.vue';
import FilterBar from '../components/FilterBar.vue';
import Filters from '../components/Filters.vue';
import MonthNav from '../components/MonthNav.vue';

// Disable prerendering to enable SSR
export const prerender = false;

// Fetch events server-side for SSR
let eventsData = { future: [], today: [], past: [] };
let booksData = [];
// Don't fetch user info during SSR - it requires client-specific headers
// The client will fetch this on mount
let userInfo = null;

try {
  // Get the base URL for API calls
  const baseUrl = new URL(Astro.request.url).origin;
  
  // Fetch events and books in parallel (no user info during SSR)
  const [eventsResponse, booksResponse] = await Promise.all([
    fetch(`${baseUrl}/api/get-events`),
    fetch(`${baseUrl}/api/get-books`)
  ]);

  if (eventsResponse.ok) {
    eventsData = await eventsResponse.json();
  }
  if (booksResponse.ok) {
    booksData = await booksResponse.json();
  }
} catch (error) {
  console.error('Error fetching data server-side:', error);
}

---

<DefaultLayout>
  <Today client:load />
  <FilterBar client:only="vue" />
  <Filters client:only="vue" />
  <div class="container grid">
    <div id="events" role="region" aria-labelledby="upcoming-events-heading" class="py-l readable main-content">
      <h1 id="upcoming-events-heading" class="sr-only">Upcoming accessibility events</h1>
      <!-- Server-rendered content for no-JS users -->
      <div id="static-events-container">
        <StaticEventList 
          type="upcoming"
          initialEvents={eventsData}
          initialBooks={booksData}
          initialUserInfo={userInfo}
        />
      </div>
      
      <!-- Progressive enhancement replaces static content -->
      <EventList 
        type="upcoming" 
        client:load
        initialEvents={eventsData}
        initialBooks={booksData}
        initialUserInfo={userInfo}
      />
    </div>
    <MonthNav id="month-nav" class="mb-l" client:load contentRegion='#events' showTodayLink={true} />
  </div>
</DefaultLayout>

<style>
  #month-nav {
    display: none;
  }
  @media (min-width: 769px) {
    #month-nav {
      display: block;
    }
    .grid {
      display: grid;
      grid-template-columns: 3fr 1fr;
      gap: var(--p-space-l);
      align-items: start;
    }
  }

  .main-content {
    min-width: 0; /* Prevent content overflow */
  }

</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    let drawer = document.querySelector('sl-drawer');
    let retries = 0;
    const maxRetries = 5;

    // If drawer not found, retry with delay
    function initDrawer() {
      if (!drawer && retries < maxRetries) {
        setTimeout(() => {
          drawer = document.querySelector('sl-drawer');
          if (drawer) {
            setupEventListeners();
          } else {
            retries++;
            initDrawer();
          }
        }, 100);
      } else if (drawer) {
        setupEventListeners();
      } else {
        console.error('Drawer not found after retries');
      }
    }

    function setupEventListeners() {
      document.addEventListener('filters:open', () => {
        try {
          drawer.show();
        } catch (e) {
          console.error('Error showing drawer:', e);
        }
      });

      document.addEventListener('filters:close', () => {
        try {
          drawer.hide();
        } catch (e) {
          console.error('Error hiding drawer:', e);
        }
      });
    }

    initDrawer();
  });
</script>

